{"version":3,"sources":["contexts/StaffContext/staff-context.js","components/StatusBar/StatusBar.js","components/DashboardCard/DashboardCard.js","components/DashboardIDInput/DashboardIDInput.js","contexts/PseudoDataContext/PseudoDataContext.js","screens/DashboardScreen/DashboardScreen.js","components/TaskboardCard/TaskboardCard.js","components/CheckinComponent/CheckinComponent.js","screens/TaskboardScreen/TaskboardScreen.js","components/CardListCard/CardListCard.js","components/CardListComponent/CardListComponent.js","components/MissionCard/MissionCard.js","components/MissionListComponent/MissionListComponent.js","screens/MissionScreen/MissionScreen.js","App.js","serviceWorker.js","index.js"],"names":["StaffContext","createContext","staff","room_id","setStaff","setRoom_id","StaffProvider","value","setState","state","Provider","this","props","children","Component","StaffConsumer","Consumer","StatusBar","useState","currentTime","Date","toLocaleDateString","statusbar","Container","Row","Col","xs","DashboardCard","Card","style","width","Body","Title","title","Text","remarklist","DashboardIDInput","cardInputRef","createRef","input","setInput","InputGroup","Prepend","id","FormControl","ref","placeholder","aria-label","aria-describedby","onChange","current","Button","onClick","caseDatum","elderID","PseudoDataContext","datum","PseudoDataProvider","PseudoDataConsumer","DashboardScreen","updateStaff","TaskboardCard","as","onSelect","select","cursor","CheckinComponent","isCheck","isLoading","check","setCheck","useEffect","Promise","resolve","setTimeout","then","variant","disabled","Spinner","size","animation","fakeDate","previousDate","toLocaleString","TaskboardScreen","option","setOption","prevDate","setDate","getDate","setFakeDate","redirectTimer","clearTimeout","to","href","CardListCard","backgroundColor","item","isSelect","Figure","Image","height","alt","src","process","e_name","change_loc","change_diaper","CardListComponent","task","list","map","e","key","MissionCard","selectedCardStyle","cardStyle","MissionListComponent","isSelectDetail","isSubmit","mission","setMission","console","log","simulateNetworkRequest","updateMission","updateMissionDetail","onCancelClick","padding","choiceCardStyle","selectedChoiceCardStyle","position","bottom","right","left","updateChangeLoc","updateChangeDiaper","window","location","reload","Alert","MissionScreen","setTask","s_task","selectAll","found","findIndex","choice","App","className","exact","path","from","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d0f49c2.chunk.js","sourcesContent":["import React, {Component, createContext} from \"react\";\n\nconst StaffContext = createContext({\n    staff: null,\n    room_id: \"Y1\",\n    setStaff: () => {},\n    setRoom_id: () => {}\n});\n\nexport class StaffProvider extends Component {\n    setStaff = (value) => {\n        this.setState({staff: value})\n    }\n\n    setRoom_id = (value) => {\n        this.setState({room_id: value})\n    }\n\n    state = {\n        staff: null,\n        room_id: \"037\",\n        setStaff: this.setStaff,\n        setRoom_id: this.setRoom_id\n    }\n\n    render() {\n        return (\n            <StaffContext.Provider value={this.state}>\n                {this.props.children}\n            </StaffContext.Provider>\n        )\n    }\n}\n\nexport const StaffConsumer = StaffContext.Consumer","import React, {useState} from 'react';\nimport {StaffConsumer} from \"../../contexts/StaffContext/staff-context\";\nimport {Container, Row, Col} from \"react-bootstrap\";\n\nexport default function StatusBar(props) {\n\n    const [statusbar, setStatusbar] = useState({\n        currentTime: new Date().toLocaleDateString(),\n    })\n\n    // Don't use setInterval!\n    // https://stackoverflow.com/questions/5479762/will-setinterval-cause-browsers-to-hang\n    // Stack overflow problem\n\n    // setTimeout(() => {\n    //    // console.log(new Date())\n    //    setStatusbar({currentTime: new Date().toLocaleString()})\n    // }, 30000)\n\n    return (\n        <>\n            <StaffConsumer>\n                {\n                    ({staff, room_id}) =>\n                        <Container>\n                            <Row>\n                                <Col xs={4}>\n                                    房號: {room_id}\n                                </Col>\n                                <Col xs={4}>\n                                    {staff == null ? null : \"Staff: \" + staff}\n                                </Col>\n                                <Col xs={4}>\n                                    {statusbar.currentTime}\n                                </Col>\n                            </Row>\n                        </Container>\n                }\n            </StaffConsumer>\n        </>\n    )\n}","import React from 'react';\nimport { Card } from \"react-bootstrap\";\n\nexport default function DashboardCard(props) {\n    return (\n        <Card style={{ width: '18rem'}}>\n            <Card.Body>\n                <Card.Title>{props.title}</Card.Title>\n                <Card.Text>\n                    {props.remarklist}\n                </Card.Text>\n            </Card.Body>\n        </Card>\n\n    )\n}\n","import React, {createRef, useState} from \"react\";\nimport {Button, FormControl, InputGroup} from \"react-bootstrap\";\nimport {StaffConsumer} from \"../../contexts/StaffContext/staff-context\";\n\nexport default function DashboardIDInput() {\n\n    // let location = useLocation();\n\n    const cardInputRef = createRef();\n\n    const [input, setInput] = useState({});\n\n    // This function will be used for validate user ID\n    // const validateStaff = (value, callback) => {\n    //     if (value === 1001) {\n    //         callback(value)\n    //         // Navigate to other page\n    //     }\n    // }\n\n    return (\n\n        <InputGroup>\n            <InputGroup.Prepend>\n                <InputGroup.Text id=\"card_id\">員工拍卡:</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n                ref={cardInputRef}\n                placeholder=\"Card ID\"\n                aria-label=\"Card ID\"\n                aria-describedby=\"card_id\"\n                onChange={() => setInput(cardInputRef.current.value)}\n            />\n            <StaffConsumer>\n                {({setStaff}) => (\n                    <Button onClick={() => setStaff(input)}> > </Button>\n                )}\n            </StaffConsumer>\n        </InputGroup>\n    )\n}\n","import React, {Component, createContext} from \"react\";\n\nconst caseDatum = [\n    {elderID: 101, remarklist: ['hello', 'eyu']},\n    {elderID: 102, remarklist: ['Lia', 'Luke']},\n    {elderID: 103, remarklist: ['Python', 'JS']},\n    {elderID: 104, remarklist: []},\n]\n\nconst PseudoDataContext = createContext({\n    datum: caseDatum\n\n})\n\nexport class PseudoDataProvider extends Component {\n    state = {\n        datum: caseDatum\n    }\n\n    render() {\n        return (\n            <PseudoDataContext.Provider value={this.state}>\n                {this.props.children}\n            </PseudoDataContext.Provider>\n        )\n    }\n}\n\nexport const PseudoDataConsumer = PseudoDataContext.Consumer;\n","import React from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport DashboardCard from \"../../components/DashboardCard/DashboardCard\";\nimport DashboardIDInput from \"../../components/DashboardIDInput/DashboardIDInput\";\nimport {PseudoDataConsumer} from \"../../contexts/PseudoDataContext/PseudoDataContext\";\nimport DashboardCarousel from \"../../components/DashboardCarosuel/DashboardCarousel\";\n\n\nexport default function DashboardScreen(props) {\n    return (\n        <PseudoDataConsumer>\n            {\n                ({datum}) =>\n                    <Container>\n                        <Row>\n                            <Col><DashboardCard title={\"Y1-1\"} remarklist={[\"李貴\"]}/></Col>\n                            <Col><DashboardCard title={\"Y1-2\"} remarklist={[\"方祖文\"]}/></Col>\n                        </Row>\n                        <Row>\n                            <Col><DashboardCard title={\"Y1-3\"} remarklist={[\"張容容\"]}/></Col>\n                            <Col><DashboardCard title={\"Y1-4\"} remarklist={[\"何雪\"]}/></Col>\n                        </Row>\n\n                        <Row>\n                            <Col>\n                                <DashboardIDInput updateStaff={props.updateStaff}/>\n                            </Col>\n                        </Row>\n                    </Container>\n            }\n\n        </PseudoDataConsumer>\n    )\n}\n","import React from \"react\";\nimport {Card} from \"react-bootstrap\";\n\nexport default function TaskboardCard(props) {\n\n    const cardOnclick = () => {\n        props.onSelect({\n            select: props.title\n        })\n    }\n\n\n    return (\n        <Card as=\"a\" onClick={cardOnclick} style={{ cursor: \"pointer\", width: '18rem'}}>\n            <Card.Body>\n                <Card.Title>\n                    {props.title}\n                </Card.Title>\n            </Card.Body>\n        </Card>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Container, Row, Spinner} from \"react-bootstrap\";\n\nexport default function CheckinComponent(props) {\n\n    const [check, setCheck] = useState({\n        isCheck: false,\n        isLoading: false\n    })\n\n    // This function is referring to\n    // https://react-bootstrap.netlify.app/components/buttons/#button-loading-state\n    const simulateNetworkRequest = () => {\n        return new Promise((resolve) => setTimeout(resolve, 1000));\n    }\n\n    useEffect(() => {\n        if (check.isLoading) {\n            simulateNetworkRequest().then(() => {\n                setCheck({isCheck: true, isLoading: false})\n            })\n        }\n    }, [check.isLoading])\n\n    useEffect(() => {\n        if (props.select) {\n            setCheck({\n                isCheck: false,\n                isLoading: false\n            })\n        }\n    }, [props.select])\n\n    const handleClick = () => setCheck({...check, isLoading: true});\n\n    return (\n        <Container>\n            <Row>\n                <Col xs={3}>\n                    <Button variant={check.isCheck ? \"info\" : \"outline-info\"}\n                            disabled={check.isLoading}\n                            onClick={!check.isLoading ? handleClick : null}>\n                        {check.isLoading ? <Spinner as=\"span\" size=\"sm\" animation=\"border\"/> : <span>&#10003;</span>}\n\n                    </Button>\n                </Col>\n                <Col xs={9}>\n                    <Row>\n                        {/* check incoming date is undefined or null */}\n                        <span>上次<strong> {props.select} </strong>時間: {props.fakeDate.previousDate.toLocaleString()}</span>\n                    </Row>\n                    <Row>\n                        {check.isCheck ?\n                            <span>今次 <strong>{props.select}</strong> 時間: {new Date().toLocaleString()}</span> : null}\n                    </Row>\n                </Col>\n            </Row>\n        </Container>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Container, Row} from 'react-bootstrap';\nimport TaskboardCard from \"../../components/TaskboardCard/TaskboardCard\";\nimport CheckinComponent from \"../../components/CheckinComponent/CheckinComponent\";\nimport {Redirect} from \"react-router-dom\";\n\nexport default function TaskboardScreen() {\n\n    // let logoutSec = 30;\n\n    const [option, setOption] = useState({\n        select: null\n    });\n\n    const prevDate = new Date()\n    prevDate.setDate(prevDate.getDate() - 1)\n\n    const [fakeDate, setFakeDate] = useState({\n        previousDate: prevDate\n    })\n\n    // let tempDate = new Date();\n    // tempDate.setDate(tempDate.getDate() - 1)\n\n    // console.log(`Entry time ${new Date().toLocaleTimeString()}`)\n\n    // useEffect(() => {\n    //     const timer = setTimeout(() => {\n    //         console.log(`Auto redirect ${new Date().toLocaleTimeString()}`)\n    //     }, 15000)\n    //     return () => clearTimeout(timer)\n    // }, [])\n\n    // const [seconds, setSeconds] = useState(logoutSec);\n    //\n    // useEffect(() => {\n    //\n    //\n    //     const interval = setTimeout(() => {\n    //         //setSeconds(seconds => seconds -1);\n    //         //if (seconds === 0) {\n    //             window.location.reload(false);\n    //         //}\n    //     }, 30000)\n    //\n    //     return () => clearInterval(interval);\n    // }, [])\n\n    // setTimeout(() => {\n    //     window.location.reload(false); // Refresh page after 30s\n    //     // return <Redirect push to=\"/\" />\n    //     console.log(\"Update Interval\")\n    // }, logoutSec * 1000)\n\n\n    useEffect(() => {\n        //console.log(`Hit effect at ${new Date().toLocaleString()}`)\n        const redirectTimer = setTimeout(() => {\n            //console.log(`Bye at ${new Date().toLocaleString()}`)\n            // window.location.reload(false); // Refresh page after 30s\n\n        }, 15000)\n        return () => clearTimeout(redirectTimer);\n    }, [])\n\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <TaskboardCard title=\"巡邏\" id=\"patrol\" onSelect={setOption}/>\n                </Col>\n                <Col>\n                    <TaskboardCard title=\"清潔\" id=\"cleansing\" onSelect={setOption}/>\n                </Col>\n                <Col>\n                    <TaskboardCard title=\"任務\" id=\"mission\" onSelect={setOption}/>\n                </Col>\n            </Row>\n            <Row>\n                {\n                    option.select ?\n                        option.select !== '任務' ?\n                            <CheckinComponent select={option.select} fakeDate={fakeDate} setFakeDate={setFakeDate}/> :\n                            <Redirect to=\"/missions\"/> :\n                        null\n                }\n            </Row>\n            <Row>\n                <Container>\n                    <Row>\n                        <Button variant=\"success\" href=\"/\">Return to home and invalidate staff</Button>\n                    </Row>\n                    <Row>\n                        {/*<h1>{seconds} 後自動返回主頁</h1>*/}\n                    </Row>\n                </Container>\n            </Row>\n        </Container>\n    )\n}\n","import React from \"react\";\nimport {Card, Col, Figure, Row} from \"react-bootstrap\";\n\nexport default function CardListCard(props) {\n\n    return (\n        <Card as=\"button\" style={{\n            width: '18rem',\n            backgroundColor: props.item.isSelect ? 'cyan' : 'white'\n        }}\n              onClick={() => props.select(props.item.title)}\n        >\n            {/*<Card.Img variant=\"left\" src={`${process.env.PUBLIC_URL}/assets/image/any.png`}/>*/}\n            <Card.Body>\n                <Row>\n                    <Col xs={3}>\n                        <Figure>\n                            <Figure.Image\n                                width={120}\n                                height={180}\n                                alt=\"120x180\"\n                                src={`${process.env.PUBLIC_URL}/assets/image/any.png`}\n                            />\n                        </Figure>\n                    </Col>\n                    <Col xs={9}>\n                        <Card.Title>{props.item.title}</Card.Title>\n                        <Row>\n                            <Col>\n                                <Card.Text>\n                                    {props.item.e_name}\n                                </Card.Text>\n                            </Col>\n                            <Col>\n                                <Col>\n                                    <Card.Text>\n                                        {props.item.change_loc ? <>{props.item.change_loc}</> : null}\n                                    </Card.Text>\n                                </Col>\n\n                                <Col>\n                                    <Card.Text>\n                                        {props.item.change_diaper ? <>{props.item.change_diaper}</> : null}\n                                    </Card.Text>\n                                </Col>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n\n    )\n}\n","import React, {useEffect} from \"react\";\nimport {Button, Col} from \"react-bootstrap\";\nimport CardListCard from \"../CardListCard/CardListCard\";\n\nexport default function CardListComponent(props) {\n\n    // useEffect(() => {\n    //     // console.log('Did update a')\n    //     // //if (props.item) {\n    //     //     console.log(props.task.list)\n    //\n    // }, [props.task.list])\n\n    return (\n        <>\n\n            <Col>\n                {props.task.list.map(e => {\n                    return <CardListCard key={e.title} item={e} select={props.select}/>\n                })}\n            </Col>\n\n        </>\n    )\n}\n","import React from 'react';\nimport {Figure, Card, Row, Col} from \"react-bootstrap\";\n\nexport default function MissionCard(props) {\n\n\n    return (\n        <Card xs={props.size} as=\"button\"\n              style={props.isSelect === props.title ? props.selectedCardStyle : props.cardStyle}\n              onClick={() => props.select(props.title)}>\n            <Card.Body>\n                <Card.Title>\n                    {props.title}\n                </Card.Title>\n            </Card.Body>\n        </Card>\n    )\n\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Alert, Button, Col, Row, Spinner} from \"react-bootstrap\";\nimport MissionCard from \"../MissionCard/MissionCard\";\n\nexport default function MissionListComponent(props) {\n\n    const [mission, setMission] = useState(\n        {\n            isSelect: null,\n            isSelectDetail: null,\n            isLoading: false,\n            isSubmit: false\n        }\n    )\n\n    // useEffect method for mission item selection\n    useEffect(() => {\n        if (mission) {\n            console.log(mission.isSelect, mission.isSelectDetail)\n        }\n    }, [mission])\n\n    // useEffect method for simulate network submit\n    useEffect(() => {\n        if (mission.isLoading) {\n            simulateNetworkRequest().then(() => {\n                setMission({...mission, isLoading: false, isSubmit: true})\n            })\n        }\n    }, [mission.isLoading])\n\n    const updateMission = (title) => {\n        setMission({\n            ...mission,\n            isSelect: title,\n            isSelectDetail: null,\n            isSubmit: false\n        })\n    }\n\n    const updateMissionDetail = (title) => {\n        console.log(`updateMissionDetail ${title}`)\n        setMission({\n            ...mission,\n            isSelectDetail: title\n        })\n    }\n\n    const onUpdateClick = () => {\n        if (mission.isSelect === \"轉身\") {\n            props.updateChangeLoc(mission.isSelectDetail)\n        } else if (mission.isSelect === \"換片\") {\n            props.updateChangeDiaper(mission.isSelectDetail)\n        }\n\n        setMission(({\n            ...mission,\n            isSelect: null,\n            isSelectDetail: null,\n        }))\n    }\n\n    const simulateNetworkRequest = () => {\n        return new Promise((resolve) => setTimeout(resolve, 1000))\n    }\n\n    const onSubmitClick = () => {\n        setMission({\n            ...mission,\n            isLoading: true,\n        })\n    }\n\n\n    const onCancelClick = () => {\n        setMission({\n            ...mission,\n            isSelect: null,\n            isSelectDetail: null\n        })\n    }\n\n    const onReturnClick = () => {\n        onCancelClick()\n        window.location.reload(false)\n    }\n\n    let cardStyle = {width: '13rem', padding: '5px'}\n    let selectedCardStyle = {width: '13rem', padding: '5px', backgroundColor: 'salmon'}\n\n    let choiceCardStyle = {width: '11rem', padding: '5px'}\n    let selectedChoiceCardStyle = {width: '11rem', padding: '5px', backgroundColor: 'salmon'}\n\n\n    return (\n        <>\n            <Row style={{padding: '0px', height: '8rem'}}>\n                <Col xs={4}>\n                    <MissionCard title=\"轉身\" cardStyle={cardStyle}\n                                 selectedCardStyle={selectedCardStyle} isSelect={mission.isSelect}\n                                 select={updateMission}/>\n                </Col>\n                <Col xs={4}>\n                    <MissionCard title=\"換片\" cardStyle={cardStyle}\n                                 selectedCardStyle={selectedCardStyle} isSelect={mission.isSelect}\n                                 select={updateMission}/>\n                </Col>\n                <Col xs={4}>\n                    <MissionCard title=\"???\" cardStyle={cardStyle}\n                                 selectedCardStyle={selectedCardStyle} isSelect={mission.isSelect}\n                                 select={updateMission}/>\n                </Col>\n            </Row>\n            <Row>\n                {\n                    mission.isSelect ?\n                        mission.isSelect === \"轉身\" ?\n                            <>\n                                <Col xs={4}>\n                                    <MissionCard title=\"平卧\" isSelect={mission.isSelectDetail}\n                                                 cardStyle={choiceCardStyle}\n                                                 selectedCardStyle={selectedChoiceCardStyle}\n                                                 select={updateMissionDetail}/>\n                                </Col>\n                                <Col xs={4}>\n                                    <MissionCard title=\"左則\" isSelect={mission.isSelectDetail}\n                                                 cardStyle={choiceCardStyle}\n                                                 selectedCardStyle={selectedChoiceCardStyle}\n                                                 select={updateMissionDetail}/>\n                                </Col>\n                                <Col xs={4}>\n                                    <MissionCard title=\"右則\" isSelect={mission.isSelectDetail}\n                                                 cardStyle={choiceCardStyle}\n                                                 selectedCardStyle={selectedChoiceCardStyle}\n                                                 select={updateMissionDetail}/>\n                                </Col>\n                            </>\n                            :\n                            mission.isSelect === \"換片\" ?\n                                <>\n                                    <Col xs={4}>\n                                        <MissionCard title=\"大便\" isSelect={mission.isSelectDetail}\n                                                     cardStyle={choiceCardStyle}\n                                                     selectedCardStyle={selectedChoiceCardStyle}\n                                                     select={updateMissionDetail}/>\n                                    </Col>\n                                    <Col xs={4}>\n                                        <MissionCard title=\"小便\" isSelect={mission.isSelectDetail}\n                                                     cardStyle={choiceCardStyle}\n                                                     selectedCardStyle={selectedChoiceCardStyle}\n                                                     select={updateMissionDetail}/>\n                                    </Col>\n                                </>\n                                :\n                                mission.isSelect === \"???\" ?\n                                    <>\n                                    </>\n                                    :\n                                    <>\n                                    </>\n                        :\n                        <>\n                        </>\n\n                }\n            </Row>\n            <Row style={{\n                padding: '0px',\n                height: '4rem',\n                width: 'auto',\n                position: 'absolute',\n                bottom: '4rem',\n                right: '0',\n                left: '0'\n            }}>\n                {mission.isSelect ?\n                    <>\n                        <Col xs={6}><Button variant=\"danger\" onClick={() => onUpdateClick()}\n                                            disabled={mission.isSelectDetail === null}>確認</Button></Col>\n                        <Col xs={6}><Button variant=\"success\" onClick={() => onCancelClick()}>取消</Button></Col>\n                    </>\n                    :\n                    <>\n                        <Col xs={6}><Button variant=\"outline-danger\"\n                                            onClick={() => onSubmitClick()}>\n                            {mission.isLoading ? <Spinner as=\"span\" size=\"sm\" animation=\"border\" /> : <span>上載數據</span>}\n                        </Button></Col>\n                        <Col xs={6}><Button variant=\"outline-success\"\n                                            onClick={() => onReturnClick()}>返回上一頁</Button></Col>\n                    </>}\n            </Row>\n            <Row style={{\n                padding: '0px',\n                height: '4rem',\n                width: 'auto',\n                position: 'absolute',\n                bottom: '0',\n                right: '0',\n                left: '0'\n            }}>\n                {mission.isSubmit ? <Col xs={12}><Alert variant=\"success\"> 上載成功! </Alert></Col> : null}\n            </Row>\n        </>\n    )\n}\n","import React, {useState} from \"react\";\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\nimport CardListComponent from \"../../components/CardListComponent/CardListComponent\";\nimport MissionListComponent from \"../../components/MissionListComponent/MissionListComponent\";\n\nexport default function MissionScreen() {\n\n    // This is pseudo state with hard-code data\n    const [task, setTask] = useState({\n        list: [\n            {\n                title: 125882,\n                e_name: '李貴',\n                isSelect: false,\n                change_loc: null,\n                change_diaper: null\n            },\n            {\n                title: 125881,\n                e_name: '方祖文',\n                isSelect: false,\n                change_loc: null,\n                change_diaper: null\n            },\n            {\n                title: 125885,\n                e_name: '張容容',\n                isSelect: false,\n                change_loc: null,\n                change_diaper: null\n            },\n            {\n                title: 125883,\n                e_name: '何雪',\n                isSelect: false,\n                change_loc: null,\n                change_diaper: null\n            }\n        ]\n    })\n\n    const selectAll = () => {\n        let s_task = [...task.list]\n        s_task = s_task.map(e => ({\n            ...e,\n            isSelect: true\n        }))\n        setTask({list: s_task})\n    }\n\n    const select = (title) => {\n        let s_task = [...task.list]\n        // console.log(title)\n        let found = s_task.findIndex(e => e.title === title)\n        // console.log(found)\n        let item = {...s_task[found]}\n        item.isSelect = !item.isSelect\n        s_task[found] = item\n        setTask({list: s_task})\n    }\n\n    const updateChangeLoc = (choice) => {\n        // Check isSelect\n        // then update its status\n        let s_task = [...task.list]\n        s_task = s_task.map(e => (e.isSelect === true ? {...e, change_loc: choice} : e))\n        setTask({list: s_task})\n    }\n\n    const updateChangeDiaper = (choice) => {\n        // Check isSelect\n        // then update its status\n        let s_task = [...task.list]\n        s_task = s_task.map(e => (e.isSelect === true ? {...e, change_diaper: choice} : e))\n        setTask({list: s_task})\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Button variant=\"warning\" onClick={() => selectAll()}>\n                        ALL\n                    </Button>\n                </Col>\n                <Col>\n\n                </Col>\n                <Col></Col>\n            </Row>\n            <Row>\n                <Col xs={4}>\n                    <CardListComponent task={task} setTask={setTask} select={select}/>\n                </Col>\n                <Col xs={8}>\n                    <MissionListComponent updateChangeLoc={updateChangeLoc} updateChangeDiaper={updateChangeDiaper}/>\n                </Col>\n            </Row>\n        </Container>\n    )\n\n}\n","import React from 'react';\nimport './App.css';\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport StatusBar from \"./components/StatusBar/StatusBar\";\nimport DashboardScreen from \"./screens/DashboardScreen/DashboardScreen\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {StaffConsumer} from \"./contexts/StaffContext/staff-context\";\nimport TaskboardScreen from \"./screens/TaskboardScreen/TaskboardScreen\";\nimport MissionScreen from \"./screens/MissionScreen/MissionScreen\";\n\nfunction App() {\n\n    return (\n        <StaffConsumer>\n\n                {\n                    ({staff, room_id}) =>\n                        <div className=\"App\">\n                            <StatusBar staff={staff} room_id={room_id}/>\n                            <Switch>\n                                <Route exact path=\"/\">\n                                    {staff !== null ? <Redirect to=\"/tasks\"/> : null}\n                                    <DashboardScreen/>\n                                </Route>\n\n                                <Route path=\"/config\">\n                                    <h3>Set room no.</h3>\n                                </Route>\n\n                                <Route path={\"/tasks\"}>\n                                    {staff == null ? <Redirect to=\"/\"/> : null}\n                                    <TaskboardScreen/>\n                                </Route>\n\n                                <Route path={\"/missions\"}>\n                                    {staff == null ? <Redirect to=\"/\"/> : null}\n                                    <MissionScreen/>\n                                </Route>\n\n\n                                {/* Need to invalidate staff ID here or\n                             redirect the user to task page if staff ID exist */}\n                                <Redirect from=\"*\" to=\"/\"/>\n\n                            </Switch>\n\n                        </div>\n\n                }\n\n        </StaffConsumer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {StaffProvider} from \"./contexts/StaffContext/staff-context\";\nimport {PseudoDataProvider} from \"./contexts/PseudoDataContext/PseudoDataContext\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <StaffProvider>\n            <PseudoDataProvider>\n                <BrowserRouter>\n                    <App/>\n                </BrowserRouter>\n            </PseudoDataProvider>\n        </StaffProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}